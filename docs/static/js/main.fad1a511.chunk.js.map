{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","item","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAC3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACE,sBAAMC,SARc,SAACC,GACrBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,EAAcE,GACdC,EAAc,MAIlB,SACE,uBAAOM,KAAK,OAAOC,MAAOR,EAAYS,SAZhB,SAACN,GACzBF,EAAcE,EAAEO,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAEkEC,UAAUH,GAF5E,qBAIDI,MAAMF,GAJL,cAIbG,EAJa,gBAKIA,EAAIC,OALR,uBAKXC,EALW,EAKXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVnB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,EAAnBJ,GAAoB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IACnC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACxB,ECD0B,SAACA,GAC3B,MAA0Bb,mBAAS,CACjCoB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OANAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACpBH,EAAS,CAAEf,KAAMkB,EAAML,SAAS,SAEnC,CAACpB,IAEGqB,EDX0BK,CAAa1B,GAAtCoB,EAAR,EAAQA,QAAcP,EAAtB,EAAiBN,KAEjB,OACE,qCACE,oBAAIS,UAAU,oCAAd,SAAmDhB,IAClDoB,EACC,mBAAGJ,UAAU,mCAAb,wBAEA,qBAAKA,UAAU,4BAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aESnBgB,EAnBM,WACjB,MAAoCxC,mBAAS,CAAC,aAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAKF,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAND,SAACc,GACfd,EAAc,CAACc,GAAF,mBAAe4B,QAM1B,uBACA,6BACGA,EAAWnB,KAAI,SAACoB,GAAD,OACd,cAAC,EAAD,CAAoB7B,SAAU6B,GAAhBA,Y,MCZxBC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.fad1a511.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  const handleSubbmit = (e) => {\r\n    e.preventDefault();\r\n    if(inputValue.trim().length>2){\r\n        setCategories(inputValue)\r\n        setInputValue('')\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubbmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url =\r\n      `https://api.giphy.com/v1/gifs/search?api_key=6jqksjnOVuaB94pS15yM3NwotVLnXhZn&q=${encodeURI(category)}&limit=5`;\r\n\r\n    const res = await fetch(url);\r\n    const { data } = await res.json();\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    return gifs\r\n  };","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title,url}) => {\r\n    return (\r\n        <div className='card'>\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { loading, data:images } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__zoomIn'>{category}</h3>\r\n      {loading ? (\r\n        <p className='animate__animated animate__flash'>loading...</p>\r\n      ) : (\r\n        <div className=\"card-grid animate__fadeIn\">\r\n          {images.map((img) => (\r\n            <GifGridItem key={img.id} {...img} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n        setState({ data: imgs, loading: false });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([\"OnePunch\"])\r\n\r\nconst handleAdd = (category) => {\r\n    setCategories([category, ...categories])\r\n}\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={handleAdd}/>\r\n      <hr />\r\n      <ol>\r\n        {categories.map((item) => (\r\n          <GifGrid key={item} category={item} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}